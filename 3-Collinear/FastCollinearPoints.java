/* *****************************************************************************
 *  Name: Garrett Holman
 *  Date: 4/4/19
 *  Description: Fast Collinear Points takes in a text file of 2D coordinates
 *  and efficiently determines collinear points. This algorithm works in
 *  n^2log(n) time, rather than the brute force n^4 time.
 **************************************************************************** */

import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.StdDraw;
import edu.princeton.cs.algs4.StdOut;

import java.util.ArrayList;
import java.util.Arrays;

public class FastCollinearPoints {
    private LineSegment[] segments;

    public FastCollinearPoints(Point[] points) {
        if (points == null)
            throw new IllegalArgumentException("Constructor cannot be null");

        checkNullArguments(points);

        int n = points.length;
        ArrayList<LineSegment> segmentList = new ArrayList<LineSegment>();

        // Stores list of points that create a segment -> easy to remove duplicates after loops
        ArrayList<ArrayList<Point>> segmentPoints = new ArrayList<ArrayList<Point>>();

        Point[] pointsCopy = points.clone();
        Point[] pointsNaturalOrder = points.clone();
        Arrays.sort(pointsNaturalOrder);

        checkRepeatedPoints(pointsNaturalOrder);

        for (int i = 0; i < n; i++) {
            Point invokingPoint = pointsNaturalOrder[i];
            Arrays.sort(pointsCopy, invokingPoint.slopeOrder());
            int count = 1;

            for (int j = 0; j < n - 1; j += count) {
                // slope from invoking to next point
                double slope = invokingPoint.slopeTo(pointsCopy[j]);

                // add point to pointList if the slope is the same as the invoking point to point j
                ArrayList<Point> newSegmentPointList = new ArrayList<Point>();
                newSegmentPointList.add(invokingPoint);
                newSegmentPointList.add(pointsCopy[j]);

                while (j + count < n && invokingPoint.slopeTo(pointsCopy[j + count]) == slope) {
                    // StdOut.println("New slope: " + invokingPoint.slopeTo(points[j + 1]));
                    newSegmentPointList.add(pointsCopy[j + count]);
                    count++;
                }

                if (count >= 3) {
                    // Add pointlist to segment points
                    segmentPoints.add(newSegmentPointList);
                }
                count = 1;
            }
        }
        // create new array list,
        // select element from segmentPoints,
        // iterate through new list, if any contain points, break
        // else add element!
        ArrayList<ArrayList<Point>> newPointList = new ArrayList<ArrayList<Point>>();
        for (ArrayList<Point> segmentPoint : segmentPoints) {
            // compare lengths, if the new one is longer we want to remove the one in the new list
            boolean addSegment = true;  // Assume true, if newPointList is empty
            for (ArrayList<Point> newPoint : newPointList) {
                if (newPoint.size() >= segmentPoint.size() && newPoint.containsAll(segmentPoint)) {
                    addSegment = false;
                    break;
                }
                else if (newPoint.size() < segmentPoint.size() && segmentPoint
                        .containsAll(newPoint)) {
                    newPointList.remove(newPoint);
                    break;
                }
            }
            if (addSegment) {
                newPointList.add(segmentPoint);
                // StdOut.print("added new segment!");
            }
        }

        for (ArrayList<Point> pointList : newPointList) {
            Point[] pointArray = new Point[pointList.size()];
            pointArray = pointList.toArray(pointArray);
            Arrays.sort(pointArray);
            LineSegment segment = new LineSegment(pointArray[0], pointArray[pointArray.length - 1]);
            segmentList.add(segment);
        }

        segments = new LineSegment[segmentList.size()];
        segments = segmentList.toArray(segments);
    }

    /**
     * Return the number of line segments generated by collinear points
     *
     * @return segments' length
     */
    public int numberOfSegments() {
        return segments.length;
    }

    /**
     * Return the list of segments generated by the collinear points
     *
     * @return segments
     */
    public LineSegment[] segments() {
        LineSegment[] segmentsCopy = segments.clone();
        return segmentsCopy;
    }

    /**
     * Check for repeated points. This takes n^2 time, but a hashset would make it n...
     *
     * @param points list of points to check
     * @throws IllegalArgumentException if points are repeated
     */
    private void checkRepeatedPoints(Point[] points) {
        int n = points.length;
        for (int i = 0; i < n - 1; i++) {
            if (points[i].equals(points[i + 1])) {
                throw new IllegalArgumentException("No repeated Points");
            }
        }
    }

    /**
     * Check for null arguments
     *
     * @param points list of points to check
     * @throws IllegalArgumentException if any points are null
     */
    private void checkNullArguments(Point[] points) {
        for (int i = 0; i < points.length; i++) {
            if (points[i] == null) {
                throw new IllegalArgumentException("No null points");
            }
        }
    }

    public static void main(String[] args) {

        In in = new In(args[0]);
        int n = in.readInt();
        Point[] points = new Point[n];
        for (int i = 0; i < n; i++) {
            int x = in.readInt();
            int y = in.readInt();
            points[i] = new Point(x, y);
        }

        // draw the points
        StdDraw.enableDoubleBuffering();
        StdDraw.setXscale(0, 32768);
        StdDraw.setYscale(0, 32768);
        for (Point p : points) {
            p.draw();
        }
        StdDraw.show();

        // print and draw the line segments
        FastCollinearPoints collinear = new FastCollinearPoints(points);
        for (LineSegment segment : collinear.segments()) {
            StdOut.println(segment);
            segment.draw();
        }

        StdOut.println(collinear.numberOfSegments());
        StdDraw.show();
    }
}
